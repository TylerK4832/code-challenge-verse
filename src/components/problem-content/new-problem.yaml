problems:
  - title: "3. Restaurant Reservation System"
    id: "restaurant-reservation-system"
    difficulty: "Medium"
    problem-content: "./RestaurantReservationContent.tsx"
    placeholder-code:
      - language: python
        code: |
          class RestaurantReservation:
              def __init__(self):
                  # Initialize the system with no reservations
                  pass

              def makeReservation(self, tableId: int, name: str) -> bool:
                  # Attempt to make a reservation for a table with the given tableId
                  pass

              def cancelReservation(self, tableId: int) -> bool:
                  # Cancel the reservation for the given tableId
                  pass

              def checkAvailability(self, tableId: int) -> bool:
                  # Check if the table with tableId is available or reserved
                  pass

          # Your RestaurantReservation object will be instantiated and called as such:
          # obj = RestaurantReservation()
          # param_1 = obj.makeReservation(tableId, name)
          # param_2 = obj.cancelReservation(tableId)
          # param_3 = obj.checkAvailability(tableId)

      - language: cpp
        code: |
          class RestaurantReservation {
          public:
              RestaurantReservation() {
                  // Initialize the system with no reservations
              }

              bool makeReservation(int tableId, std::string name) {
                  // Attempt to make a reservation for a table with the given tableId
              }

              bool cancelReservation(int tableId) {
                  // Cancel the reservation for the given tableId
              }

              bool checkAvailability(int tableId) {
                  // Check if the table with tableId is available or reserved
              }
          };

          /**
           * Your RestaurantReservation object will be instantiated and called as such:
           * RestaurantReservation* obj = new RestaurantReservation();
           * bool param_1 = obj->makeReservation(tableId, name);
           * bool param_2 = obj->cancelReservation(tableId);
           * bool param_3 = obj->checkAvailability(tableId);
           */

      - language: java
        code: |
          class RestaurantReservation {
              public RestaurantReservation() {
                  // Initialize the system with no reservations
              }

              public boolean makeReservation(int tableId, String name) {
                  // Attempt to make a reservation for a table with the given tableId
              }

              public boolean cancelReservation(int tableId) {
                  // Cancel the reservation for the given tableId
              }

              public boolean checkAvailability(int tableId) {
                  // Check if the table with tableId is available or reserved
              }
          }

          /**
           * Your RestaurantReservation object will be instantiated and called as such:
           * RestaurantReservation obj = new RestaurantReservation();
           * boolean param_1 = obj.makeReservation(tableId, name);
           * boolean param_2 = obj.cancelReservation(tableId);
           * boolean param_3 = obj.checkAvailability(tableId);
           */

      - language: javascript
        code: |
          class RestaurantReservation {
              constructor() {
                  // Initialize the system with no reservations
              }

              makeReservation(tableId, name) {
                  // Attempt to make a reservation for a table with the given tableId
              }

              cancelReservation(tableId) {
                  // Cancel the reservation for the given tableId
              }

              checkAvailability(tableId) {
                  // Check if the table with tableId is available or reserved
              }
          }

          /**
           * Your RestaurantReservation object will be instantiated and called as such:
           * var obj = new RestaurantReservation();
           * var param_1 = obj.makeReservation(tableId, name);
           * var param_2 = obj.cancelReservation(tableId);
           * var param_3 = obj.checkAvailability(tableId);
           */

    test-cases:
      - language: python
        number: 1
        code: |
          restaurant = RestaurantReservation()
          assertEquals(restaurant.makeReservation(1, "John"), True)
          assertEquals(restaurant.checkAvailability(1), False)
          assertEquals(restaurant.cancelReservation(1), True)
          assertEquals(restaurant.checkAvailability(1), True)

      - language: python
        number: 2
        code: |
          restaurant = RestaurantReservation()
          assertEquals(restaurant.checkAvailability(2), True)
          assertEquals(restaurant.makeReservation(2, "Alice"), True)
          assertEquals(restaurant.makeReservation(2, "Bob"), False)

      - language: python
        number: 3
        code: |
          restaurant = RestaurantReservation()
          assertEquals(restaurant.cancelReservation(3), False)
          assertEquals(restaurant.makeReservation(3, "Charlie"), True)
          assertEquals(restaurant.cancelReservation(3), True)
          assertEquals(restaurant.checkAvailability(3), True)

      - language: cpp
        number: 1
        code: |
          RestaurantReservation* restaurant = new RestaurantReservation();
          Printer::assertEquals(restaurant->makeReservation(1, "John"), true);
          Printer::assertEquals(restaurant->checkAvailability(1), false);
          Printer::assertEquals(restaurant->cancelReservation(1), true);
          Printer::assertEquals(restaurant->checkAvailability(1), true);

      - language: java
        number: 1
        code: |
          RestaurantReservation restaurant = new RestaurantReservation();
          assertEquals(restaurant.makeReservation(1, "John"), true);
          assertEquals(restaurant.checkAvailability(1), false);
          assertEquals(restaurant.cancelReservation(1), true);
          assertEquals(restaurant.checkAvailability(1), true);

      - language: javascript
        number: 1
        code: |
          var restaurant = new RestaurantReservation();
          assertEquals(restaurant.makeReservation(1, "John"), true);
          assertEquals(restaurant.checkAvailability(1), false);
          assertEquals(restaurant.cancelReservation(1), true);
          assertEquals(restaurant.checkAvailability(1), true);