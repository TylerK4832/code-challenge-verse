problems:
  - title: "3. Library System"
    id: "library-system"
    difficulty: "Medium"
    problem-content: "./LibrarySystemContent.tsx"
    placeholder-code:
      - language: python
        code: |
          class LibrarySystem:
              def __init__(self, books: dict):
                  # Initialize the library with a dictionary of books and their quantities.
                  pass

              def borrowBook(self, bookTitle: str) -> bool:
                  # Attempt to borrow a book. Return True if successful, False if not available.
                  pass

              def returnBook(self, bookTitle: str) -> None:
                  # Return a book to the library, increasing its quantity.
                  pass

          # Your LibrarySystem object will be instantiated and called as such:
          # obj = LibrarySystem(books)
          # param_1 = obj.borrowBook(bookTitle)
          # obj.returnBook(bookTitle)
      - language: cpp
        code: |
          class LibrarySystem {
            public:
              LibrarySystem(unordered_map<string, int> books) {
                  // Initialize the library with books and their quantities.
              }

              bool borrowBook(string bookTitle) {
                  // Attempt to borrow a book. Return true if successful, false if not available.
              }

              void returnBook(string bookTitle) {
                  // Return a book to the library, increasing its quantity.
              }
          };

          /**
           * Your LibrarySystem object will be instantiated and called as such:
           * LibrarySystem* obj = new LibrarySystem(books);
           * bool param_1 = obj->borrowBook(bookTitle);
           * obj->returnBook(bookTitle);
           */
      - language: java
        code: |
          class LibrarySystem {

            public LibrarySystem(Map<String, Integer> books) {
                // Initialize the library with books and their quantities.
            }

            public boolean borrowBook(String bookTitle) {
                // Attempt to borrow a book. Return true if successful, false if not available.
            }

            public void returnBook(String bookTitle) {
                // Return a book to the library, increasing its quantity.
            }
          }

          /**
           * Your LibrarySystem object will be instantiated and called as such:
           * LibrarySystem obj = new LibrarySystem(books);
           * boolean param_1 = obj.borrowBook(bookTitle);
           * obj.returnBook(bookTitle);
           */
      - language: javascript
        code: |
          /**
           * @param {Object} books
           */
          var LibrarySystem = function(books) {
            // Initialize the library with books and their quantities.
          };

          /**
           * @param {string} bookTitle
           * @return {boolean}
           */
          LibrarySystem.prototype.borrowBook = function(bookTitle) {
            // Attempt to borrow a book. Return true if successful, false if not available.
          };

          /**
           * @param {string} bookTitle
           */
          LibrarySystem.prototype.returnBook = function(bookTitle) {
            // Return a book to the library, increasing its quantity.
          };

          /**
           * Your LibrarySystem object will be instantiated and called as such:
           * var obj = new LibrarySystem(books)
           * var param_1 = obj.borrowBook(bookTitle)
           * obj.returnBook(bookTitle)
           */
    test-cases:
      - language: python
        number: 1
        code: |
          library = LibrarySystem({"BookA": 2, "BookB": 1})
          assertEquals(library.borrowBook("BookA"), True)
          assertEquals(library.borrowBook("BookA"), True)
          assertEquals(library.borrowBook("BookA"), False)
          assertEquals(library.borrowBook("BookB"), True)
          library.returnBook("BookA")
          assertEquals(library.borrowBook("BookA"), True)
      - language: python
        number: 2
        code: |
          library = LibrarySystem({"BookC": 0, "BookD": 1})
          assertEquals(library.borrowBook("BookC"), False)
          assertEquals(library.borrowBook("BookD"), True)
          assertEquals(library.borrowBook("BookD"), False)
          library.returnBook("BookD")
          assertEquals(library.borrowBook("BookD"), True)
      - language: cpp
        number: 1
        code: |
          unordered_map<string, int> books = {{"BookA", 2}, {"BookB", 1}};
          LibrarySystem* library = new LibrarySystem(books);
          Printer::assertEquals(library->borrowBook("BookA"), true);
          Printer::assertEquals(library->borrowBook("BookA"), true);
          Printer::assertEquals(library->borrowBook("BookA"), false);
          Printer::assertEquals(library->borrowBook("BookB"), true);
          library->returnBook("BookA");
          Printer::assertEquals(library->borrowBook("BookA"), true);
      - language: java
        number: 1
        code: |
          Map<String, Integer> books = Map.of("BookA", 2, "BookB", 1);
          LibrarySystem library = new LibrarySystem(books);
          assertEquals(library.borrowBook("BookA"), true);
          assertEquals(library.borrowBook("BookA"), true);
          assertEquals(library.borrowBook("BookA"), false);
          assertEquals(library.borrowBook("BookB"), true);
          library.returnBook("BookA");
          assertEquals(library.borrowBook("BookA"), true);
      - language: javascript
        number: 1
        code: |
          var books = { "BookA": 2, "BookB": 1 };
          var library = new LibrarySystem(books);
          assertEquals(library.borrowBook("BookA"), true);
          assertEquals(library.borrowBook("BookA"), true);
          assertEquals(library.borrowBook("BookA"), false);
          assertEquals(library.borrowBook("BookB"), true);
          library.returnBook("BookA");
          assertEquals(library.borrowBook("BookA"), true);