problems:
  - title: "3. Taxi Dispatch System"
    id: "taxi-dispatch"
    difficulty: "Medium"
    problem-content: "./taxi-dispatch-content.tsx"
    placeholder-code:
      - language: python
        code: |
          class TaxiDispatchSystem:
              def __init__(self, n_taxis: int):
                  # Initialize system with n_taxi taxis, all initially available.
                  pass

              def requestTaxi(self, location: str) -> int:
                  # Dispatch the nearest available taxi to the requested location.
                  # Return the ID of the taxi or -1 if none available.
                  pass

              def finishRide(self, taxi_id: int):
                  # Mark the taxi with taxi_id as available.
                  pass
          # Your TaxiDispatchSystem object will be instantiated and called as such:
          # obj = TaxiDispatchSystem(n_taxis)
          # param = obj.requestTaxi(location)
          # obj.finishRide(taxi_id)
      - language: cpp
        code: |
          class TaxiDispatchSystem {
            public:
              TaxiDispatchSystem(int n_taxis) {
                  // Initialize system with n_taxis taxis, all initially available.
              }

              int requestTaxi(string location) {
                  // Dispatch the nearest available taxi to the requested location.
                  // Return the ID of the taxi or -1 if none available.
              }

              void finishRide(int taxi_id) {
                  // Mark the taxi with taxi_id as available.
              }
          };
          /**
           * Your TaxiDispatchSystem object will be instantiated and called as such:
           * TaxiDispatchSystem* obj = new TaxiDispatchSystem(n_taxis);
           * int param = obj->requestTaxi(location);
           * obj->finishRide(taxi_id);
           */
      - language: java
        code: |
          class TaxiDispatchSystem {
              public TaxiDispatchSystem(int n_taxis) {
                  // Initialize system with n_taxis taxis, all initially available.
              }

              public int requestTaxi(String location) {
                  // Dispatch the nearest available taxi to the requested location.
                  // Return the ID of the taxi or -1 if none available.
              }

              public void finishRide(int taxi_id) {
                  // Mark the taxi with taxi_id as available.
              }
          }
          /**
           * Your TaxiDispatchSystem object will be instantiated and called as such:
           * TaxiDispatchSystem obj = new TaxiDispatchSystem(n_taxis);
           * int param = obj.requestTaxi(location);
           * obj.finishRide(taxi_id);
           */
      - language: javascript
        code: |
          /**
           * @param {number} n_taxis
           */
          var TaxiDispatchSystem = function(n_taxis) {
              // Initialize system with n_taxis taxis, all initially available.
          };

          /**
           * @param {string} location
           * @return {number}
           */
          TaxiDispatchSystem.prototype.requestTaxi = function(location) {
              // Dispatch the nearest available taxi to the requested location.
              // Return the ID of the taxi or -1 if none available.
          };

          /**
           * @param {number} taxi_id
           */
          TaxiDispatchSystem.prototype.finishRide = function(taxi_id) {
              // Mark the taxi with taxi_id as available.
          };
          /**
           * Your TaxiDispatchSystem object will be instantiated and called as such:
           * var obj = new TaxiDispatchSystem(n_taxis)
           * var param = obj.requestTaxi(location)
           * obj.finishRide(taxi_id)
           */
    test-cases:
      - language: python
        number: 1
        code: |
          system = TaxiDispatchSystem(3)
          assertEquals(system.requestTaxi("Downtown"), 1)
          assertEquals(system.requestTaxi("Airport"), 2)
          assertEquals(system.requestTaxi("Mall"), 3)
          assertEquals(system.requestTaxi("Station"), -1)
          system.finishRide(2)
          assertEquals(system.requestTaxi("Beach"), 2)
      - language: python
        number: 2
        code: |
          system = TaxiDispatchSystem(1)
          assertEquals(system.requestTaxi("Museum"), 1)
          assertEquals(system.requestTaxi("Park"), -1)
          system.finishRide(1)
          assertEquals(system.requestTaxi("Stadium"), 1)
      - language: python
        number: 3
        code: |
          system = TaxiDispatchSystem(2)
          assertEquals(system.requestTaxi("University"), 1)
          assertEquals(system.requestTaxi("Hospital"), 2)
          system.finishRide(1)
          assertEquals(system.requestTaxi("Library"), 1)
          system.finishRide(2)
          assertEquals(system.requestTaxi("Café"), 2)
      - language: cpp
        number: 1
        code: |
          TaxiDispatchSystem* system = new TaxiDispatchSystem(3);
          Printer::assertEquals(system->requestTaxi("Downtown"), 1);
          Printer::assertEquals(system->requestTaxi("Airport"), 2);
          Printer::assertEquals(system->requestTaxi("Mall"), 3);
          Printer::assertEquals(system->requestTaxi("Station"), -1);
          system->finishRide(2);
          Printer::assertEquals(system->requestTaxi("Beach"), 2);
      - language: cpp
        number: 2
        code: |
          TaxiDispatchSystem* system = new TaxiDispatchSystem(1);
          Printer::assertEquals(system->requestTaxi("Museum"), 1);
          Printer::assertEquals(system->requestTaxi("Park"), -1);
          system->finishRide(1);
          Printer::assertEquals(system->requestTaxi("Stadium"), 1);
      - language: cpp
        number: 3
        code: |
          TaxiDispatchSystem* system = new TaxiDispatchSystem(2);
          Printer::assertEquals(system->requestTaxi("University"), 1);
          Printer::assertEquals(system->requestTaxi("Hospital"), 2);
          system->finishRide(1);
          Printer::assertEquals(system->requestTaxi("Library"), 1);
          system->finishRide(2);
          Printer::assertEquals(system->requestTaxi("Café"), 2);
      - language: java
        number: 1
        code: |
          TaxiDispatchSystem system = new TaxiDispatchSystem(3);
          assertEquals(system.requestTaxi("Downtown"), 1);
          assertEquals(system.requestTaxi("Airport"), 2);
          assertEquals(system.requestTaxi("Mall"), 3);
          assertEquals(system.requestTaxi("Station"), -1);
          system.finishRide(2);
          assertEquals(system.requestTaxi("Beach"), 2);
      - language: java
        number: 2
        code: |
          TaxiDispatchSystem system = new TaxiDispatchSystem(1);
          assertEquals(system.requestTaxi("Museum"), 1);
          assertEquals(system.requestTaxi("Park"), -1);
          system.finishRide(1);
          assertEquals(system.requestTaxi("Stadium"), 1);
      - language: java
        number: 3
        code: |
          TaxiDispatchSystem system = new TaxiDispatchSystem(2);
          assertEquals(system.requestTaxi("University"), 1);
          assertEquals(system.requestTaxi("Hospital"), 2);
          system.finishRide(1);
          assertEquals(system.requestTaxi("Library"), 1);
          system.finishRide(2);
          assertEquals(system.requestTaxi("Café"), 2);
      - language: javascript
        number: 1
        code: |
          var system = new TaxiDispatchSystem(3);
          assertEquals(system.requestTaxi("Downtown"), 1);
          assertEquals(system.requestTaxi("Airport"), 2);
          assertEquals(system.requestTaxi("Mall"), 3);
          assertEquals(system.requestTaxi("Station"), -1);
          system.finishRide(2);
          assertEquals(system.requestTaxi("Beach"), 2);
      - language: javascript
        number: 2
        code: |
          var system = new TaxiDispatchSystem(1);
          assertEquals(system.requestTaxi("Museum"), 1);
          assertEquals(system.requestTaxi("Park"), -1);
          system.finishRide(1);
          assertEquals(system.requestTaxi("Stadium"), 1);
      - language: javascript
        number: 3
        code: |
          var system = new TaxiDispatchSystem(2);
          assertEquals(system.requestTaxi("University"), 1);
          assertEquals(system.requestTaxi("Hospital"), 2);
          system.finishRide(1);
          assertEquals(system.requestTaxi("Library"), 1);
          system.finishRide(2);
          assertEquals(system.requestTaxi("Café"), 2);