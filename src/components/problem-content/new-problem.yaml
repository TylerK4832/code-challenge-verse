problems:
  - title: "3. Warehouse Inventory Management"
    id: "warehouse-inventory"
    difficulty: "Medium"
    problem-content: "./warehouse-inventory-content.tsx"
    placeholder-code:
      - language: python
        code: |
          class Warehouse:
              def __init__(self):
                  pass

              def addItem(self, itemType: str, quantity: int) -> bool:
                  pass

              def removeItem(self, itemType: str, quantity: int) -> bool:
                  pass

              def getInventory(self) -> dict:
                  pass

          # Your Warehouse object will be instantiated and called as such:
          # obj = Warehouse()
          # param_1 = obj.addItem(itemType, quantity)
          # param_2 = obj.removeItem(itemType, quantity)
          # param_3 = obj.getInventory()
      - language: cpp
        code: |
          #include <string>
          #include <map>

          class Warehouse {
          public:
              Warehouse() {}

              bool addItem(const std::string &itemType, int quantity) {}

              bool removeItem(const std::string &itemType, int quantity) {}

              std::map<std::string, int> getInventory() {}
          };

          /**
           * Your Warehouse object will be instantiated and called as such:
           * Warehouse* obj = new Warehouse();
           * bool param_1 = obj->addItem(itemType, quantity);
           * bool param_2 = obj->removeItem(itemType, quantity);
           * std::map<std::string, int> param_3 = obj->getInventory();
           */
      - language: java
        code: |
          import java.util.HashMap;
          import java.util.Map;

          class Warehouse {
              public Warehouse() {}

              public boolean addItem(String itemType, int quantity) {}

              public boolean removeItem(String itemType, int quantity) {}

              public Map<String, Integer> getInventory() {}
          }

          /**
           * Your Warehouse object will be instantiated and called as such:
           * Warehouse obj = new Warehouse();
           * boolean param_1 = obj.addItem(itemType, quantity);
           * boolean param_2 = obj.removeItem(itemType, quantity);
           * Map<String, Integer> param_3 = obj.getInventory();
           */
      - language: javascript
        code: |
          var Warehouse = function() {};

          Warehouse.prototype.addItem = function(itemType, quantity) {};

          Warehouse.prototype.removeItem = function(itemType, quantity) {};

          Warehouse.prototype.getInventory = function() {};

          /**
           * Your Warehouse object will be instantiated and called as such:
           * var obj = new Warehouse();
           * var param_1 = obj.addItem(itemType, quantity);
           * var param_2 = obj.removeItem(itemType, quantity);
           * var param_3 = obj.getInventory();
           */
    test-cases:
      - language: python
        number: 1
        code: |
          warehouse = Warehouse()
          assertEquals(warehouse.addItem("apple", 10), True)
          assertEquals(warehouse.removeItem("apple", 5), True)
          assertEquals(warehouse.getInventory(), {"apple": 5})
      - language: python
        number: 2
        code: |
          warehouse = Warehouse()
          assertEquals(warehouse.removeItem("banana", 1), False)
          assertEquals(warehouse.getInventory(), {})
      - language: python
        number: 3
        code: |
          warehouse = Warehouse()
          assertEquals(warehouse.addItem("apple", 10), True)
          assertEquals(warehouse.addItem("banana", 5), True)
          assertEquals(warehouse.removeItem("apple", 3), True)
          assertEquals(warehouse.removeItem("banana", 1), True)
          assertEquals(warehouse.getInventory(), {"apple": 7, "banana": 4})
      - language: cpp
        number: 1
        code: |
          Warehouse* warehouse = new Warehouse();
          Printer::assertEquals(warehouse->addItem("apple", 10), true);
          Printer::assertEquals(warehouse->removeItem("apple", 5), true);
          Printer::assertEquals(warehouse->getInventory(), {{"apple", 5}});
      - language: cpp
        number: 2
        code: |
          Warehouse* warehouse = new Warehouse();
          Printer::assertEquals(warehouse->removeItem("banana", 1), false);
          Printer::assertEquals(warehouse->getInventory(), {});
      - language: cpp
        number: 3
        code: |
          Warehouse* warehouse = new Warehouse();
          Printer::assertEquals(warehouse->addItem("apple", 10), true);
          Printer::assertEquals(warehouse->addItem("banana", 5), true);
          Printer::assertEquals(warehouse->removeItem("apple", 3), true);
          Printer::assertEquals(warehouse->removeItem("banana", 1), true);
          Printer::assertEquals(warehouse->getInventory(), {{"apple", 7}, {"banana", 4}});
      - language: java
        number: 1
        code: |
          Warehouse warehouse = new Warehouse();
          assertEquals(warehouse.addItem("apple", 10), true);
          assertEquals(warehouse.removeItem("apple", 5), true);
          assertEquals(warehouse.getInventory(), Map.of("apple", 5));
      - language: java
        number: 2
        code: |
          Warehouse warehouse = new Warehouse();
          assertEquals(warehouse.removeItem("banana", 1), false);
          assertEquals(warehouse.getInventory(), Map.of());
      - language: java
        number: 3
        code: |
          Warehouse warehouse = new Warehouse();
          assertEquals(warehouse.addItem("apple", 10), true);
          assertEquals(warehouse.addItem("banana", 5), true);
          assertEquals(warehouse.removeItem("apple", 3), true);
          assertEquals(warehouse.removeItem("banana", 1), true);
          assertEquals(warehouse.getInventory(), Map.of("apple", 7, "banana", 4));
      - language: javascript
        number: 1
        code: |
          var warehouse = new Warehouse();
          assertEquals(warehouse.addItem("apple", 10), true);
          assertEquals(warehouse.removeItem("apple", 5), true);
          assertEquals(warehouse.getInventory(), {"apple": 5});
      - language: javascript
        number: 2
        code: |
          var warehouse = new Warehouse();
          assertEquals(warehouse.removeItem("banana", 1), false);
          assertEquals(warehouse.getInventory(), {});
      - language: javascript
        number: 3
        code: |
          var warehouse = new Warehouse();
          assertEquals(warehouse.addItem("apple", 10), true);
          assertEquals(warehouse.addItem("banana", 5), true);
          assertEquals(warehouse.removeItem("apple", 3), true);
          assertEquals(warehouse.removeItem("banana", 1), true);
          assertEquals(warehouse.getInventory(), {"apple": 7, "banana": 4});