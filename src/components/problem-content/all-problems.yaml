problems:
- title: 1. Parking Lot
  id: parking-lot
  difficulty: Easy
  problem-content: ./parking-lot-content.tsx
  placeholder-code:
  - language: python
    code: "class ParkingLot:\n\n    def __init__(self, big: int, medium: int, small:\
      \ int):\n        \n\n    def addCar(self, carType: int) -> bool:\n        \n\
      \n\n# Your ParkingLot object will be instantiated and called as such:\n# obj\
      \ = ParkingLot(big, medium, small)\n# param_1 = obj.addCar(carType)\n"
  - language: cpp
    code: "class ParkingLot {\n    public:\n        ParkingLot(int big, int medium,\
      \ int small) {\n            \n        }\n        \n        bool addCar(int carType)\
      \ {\n            \n        }\n    };\n\n/**\n* Your ParkingLot object will be\
      \ instantiated and called as such:\n* ParkingLot* obj = new ParkingLot(big,\
      \ medium, small);\n* bool param_1 = obj->addCar(carType);\n*/\n"
  - language: java
    code: "class ParkingLot {\n\n    public ParkingLot(int big, int medium, int small)\
      \ {\n        \n    }\n    \n    public boolean addCar(int carType) {\n     \
      \   \n    }\n}\n\n/**\n* Your ParkingLot object will be instantiated and called\
      \ as such:\n* ParkingLot obj = new ParkingLot(big, medium, small);\n* boolean\
      \ param_1 = obj.addCar(carType);\n*/\n"
  - language: javascript
    code: "/**\n* @param {number} big\n* @param {number} medium\n* @param {number}\
      \ small\n*/\nvar ParkingLot = function(big, medium, small) {\n    \n};\n\n/**\
      \ \n* @param {number} carType\n* @return {boolean}\n*/\nParkingLot.prototype.addCar\
      \ = function(carType) {\n    \n};\n\n/** \n* Your ParkingLot object will be\
      \ instantiated and called as such:\n* var obj = new ParkingLot(big, medium,\
      \ small)\n* var param_1 = obj.addCar(carType)\n*/\n"
  test-cases:
  - language: python
    number: 1
    code: 'lot = ParkingLot(2, 1, 0)

      assertEquals(lot.addCar(1), True)

      assertEquals(lot.addCar(1), True)

      assertEquals(lot.addCar(1), False)

      assertEquals(lot.addCar(2), True)

      assertEquals(lot.addCar(2), False)

      assertEquals(lot.addCar(3), False)

      '
    is_hidden: false
  - language: python
    number: 2
    code: 'lot = ParkingLot(0, 0, 0)

      assertEquals(lot.addCar(1), False)

      assertEquals(lot.addCar(2), False)

      assertEquals(lot.addCar(3), False)

      '
    is_hidden: false
  - language: python
    number: 3
    code: 'lot = ParkingLot(1, 2, 1)

      assertEquals(lot.addCar(3), True)

      assertEquals(lot.addCar(2), True)

      assertEquals(lot.addCar(1), True)

      assertEquals(lot.addCar(2), True)

      assertEquals(lot.addCar(2), False)

      assertEquals(lot.addCar(3), False)

      '
    is_hidden: false
  - language: cpp
    number: 1
    code: 'ParkingLot* lot = new ParkingLot(2, 1, 0);

      Printer::assertEquals(lot->addCar(1), true);

      Printer::assertEquals(lot->addCar(1), true);

      Printer::assertEquals(lot->addCar(1), false);

      Printer::assertEquals(lot->addCar(2), true);

      Printer::assertEquals(lot->addCar(2), false);

      Printer::assertEquals(lot->addCar(3), false);

      '
    is_hidden: false
  - language: cpp
    number: 2
    code: 'ParkingLot* lot = new ParkingLot(0, 0, 0);

      Printer::assertEquals(lot->addCar(1), false);

      Printer::assertEquals(lot->addCar(2), false);

      Printer::assertEquals(lot->addCar(3), false);

      '
    is_hidden: false
  - language: cpp
    number: 3
    code: 'ParkingLot* lot = new ParkingLot(1, 2, 1);

      Printer::assertEquals(lot->addCar(3), true);

      Printer::assertEquals(lot->addCar(2), true);

      Printer::assertEquals(lot->addCar(1), true);

      Printer::assertEquals(lot->addCar(2), true);

      Printer::assertEquals(lot->addCar(2), false);

      Printer::assertEquals(lot->addCar(3), false);

      '
    is_hidden: false
  - language: java
    number: 1
    code: "ParkingLot lot = new ParkingLot(2, 1, 0);\nassertEquals(lot.addCar(1),\
      \ true);\nassertEquals(lot.addCar(1), true);\nassertEquals(lot.addCar(1), false);\n\
      assertEquals(lot.addCar(2), true);\nassertEquals(lot.addCar(2), false);\nassertEquals(lot.addCar(3),\
      \ false);        \n"
    is_hidden: false
  - language: java
    number: 2
    code: 'ParkingLot lot = new ParkingLot(0, 0, 0);

      assertEquals(lot.addCar(1), false);

      assertEquals(lot.addCar(2), false);

      assertEquals(lot.addCar(3), false);

      '
    is_hidden: false
  - language: java
    number: 3
    code: 'ParkingLot lot = new ParkingLot(1, 2, 1);

      assertEquals(lot.addCar(3), true);

      assertEquals(lot.addCar(2), true);

      assertEquals(lot.addCar(1), true);

      assertEquals(lot.addCar(2), true);

      assertEquals(lot.addCar(2), false);

      assertEquals(lot.addCar(3), false);

      '
    is_hidden: false
  - language: javascript
    number: 1
    code: 'var lot = new ParkingLot(2, 1, 0)

      assertEquals(lot.addCar(1), true);

      assertEquals(lot.addCar(1), true);

      assertEquals(lot.addCar(1), false);

      assertEquals(lot.addCar(2), true);

      assertEquals(lot.addCar(2), false);

      assertEquals(lot.addCar(3), false);

      '
    is_hidden: false
  - language: javascript
    number: 2
    code: 'var lot = new ParkingLot(0, 0, 0)

      assertEquals(lot.addCar(1), false);

      assertEquals(lot.addCar(2), false);

      assertEquals(lot.addCar(3), false);

      '
    is_hidden: false
  - language: javascript
    number: 3
    code: 'var lot = new ParkingLot(1, 2, 1)

      assertEquals(lot.addCar(3), true);

      assertEquals(lot.addCar(2), true);

      assertEquals(lot.addCar(1), true);

      assertEquals(lot.addCar(2), true);

      assertEquals(lot.addCar(2), false);

      assertEquals(lot.addCar(3), false);

      '
    is_hidden: false
- title: 2. Call Center
  id: call-center
  difficulty: Medium
  problem-content: ./call-center-content.tsx
  placeholder-code:
  - language: python
    code: "class CallCenter:\n\n    def __init__(self, numAgents: int):\n        #\
      \ Initialize your call center with numAgents agents.\n        # Agents are numbered\
      \ from 1 to numAgents.\n        pass\n\n    def dispatchCall(self) -> int:\n\
      \        # Dispatch a call to the available agent with the smallest id.\n  \
      \      # If an agent is available, mark them as busy and return their id.\n\
      \        # If no agents are available, return -1.\n        pass\n\n    def endCall(self,\
      \ agentId: int) -> None:\n        # Mark the agent with agentId as available.\n\
      \        pass\n\n# Your CallCenter object will be instantiated and called as\
      \ such:\n# obj = CallCenter(numAgents)\n# param = obj.dispatchCall()\n# obj.endCall(agentId)\n"
  - language: cpp
    code: "class CallCenter {\npublic:\n    CallCenter(int numAgents) {\n        //\
      \ Initialize your call center with numAgents agents.\n        // Agents are\
      \ numbered from 1 to numAgents.\n    }\n    \n    int dispatchCall() {\n   \
      \     // Dispatch a call to the available agent with the smallest id.\n    \
      \    // If an agent is available, mark them as busy and return their id.\n \
      \       // If no agents are available, return -1.\n    }\n    \n    void endCall(int\
      \ agentId) {\n        // Mark the agent with agentId as available.\n    }\n\
      };\n\n/**\n* Your CallCenter object will be instantiated and called as such:\n\
      * CallCenter* obj = new CallCenter(numAgents);\n* int param = obj->dispatchCall();\n\
      * obj->endCall(agentId);\n*/\n"
  - language: java
    code: "class CallCenter {\n\n    public CallCenter(int numAgents) {\n        //\
      \ Initialize your call center with numAgents agents.\n        // Agents are\
      \ numbered from 1 to numAgents.\n    }\n    \n    public int dispatchCall()\
      \ {\n        // Dispatch a call to the available agent with the smallest id.\n\
      \        // If an agent is available, mark them as busy and return their id.\n\
      \        // If no agents are available, return -1.\n    }\n    \n    public\
      \ void endCall(int agentId) {\n        // Mark the agent with agentId as available.\n\
      \    }\n}\n\n/**\n* Your CallCenter object will be instantiated and called as\
      \ such:\n* CallCenter obj = new CallCenter(numAgents);\n* int param = obj.dispatchCall();\n\
      * obj.endCall(agentId);\n*/\n"
  - language: javascript
    code: "/**\n* @param {number} numAgents\n*/\nvar CallCenter = function(numAgents)\
      \ {\n    // Initialize your call center with numAgents agents.\n    // Agents\
      \ are numbered from 1 to numAgents.\n};\n\n/**\n* @return {number}\n*/\nCallCenter.prototype.dispatchCall\
      \ = function() {\n    // Dispatch a call to the available agent with the smallest\
      \ id.\n    // If an agent is available, mark them as busy and return their id.\n\
      \    // If no agents are available, return -1.\n};\n\n/**\n* @param {number}\
      \ agentId\n*/\nCallCenter.prototype.endCall = function(agentId) {\n    // Mark\
      \ the agent with agentId as available.\n};\n\n/** \n* Your CallCenter object\
      \ will be instantiated and called as such:\n* var obj = new CallCenter(numAgents)\n\
      * var param = obj.dispatchCall()\n* obj.endCall(agentId)\n*/\n"
  test-cases:
  - language: python
    number: 1
    code: 'center = CallCenter(2)

      assertEquals(center.dispatchCall(), 1)

      assertEquals(center.dispatchCall(), 2)

      assertEquals(center.dispatchCall(), -1)

      center.endCall(1)

      assertEquals(center.dispatchCall(), 1)

      '
    is_hidden: false
  - language: python
    number: 2
    code: 'center = CallCenter(1)

      assertEquals(center.dispatchCall(), 1)

      assertEquals(center.dispatchCall(), -1)

      center.endCall(1)

      assertEquals(center.dispatchCall(), 1)

      '
    is_hidden: false
  - language: python
    number: 3
    code: 'center = CallCenter(3)

      assertEquals(center.dispatchCall(), 1)

      assertEquals(center.dispatchCall(), 2)

      assertEquals(center.dispatchCall(), 3)

      assertEquals(center.dispatchCall(), -1)

      center.endCall(2)

      assertEquals(center.dispatchCall(), 2)

      '
    is_hidden: false
  - language: cpp
    number: 1
    code: 'CallCenter* center = new CallCenter(2);

      Printer::assertEquals(center->dispatchCall(), 1);

      Printer::assertEquals(center->dispatchCall(), 2);

      Printer::assertEquals(center->dispatchCall(), -1);

      center->endCall(1);

      Printer::assertEquals(center->dispatchCall(), 1);

      '
    is_hidden: false
  - language: cpp
    number: 2
    code: 'CallCenter* center = new CallCenter(0);

      Printer::assertEquals(center->dispatchCall(), -1);

      '
    is_hidden: false
  - language: cpp
    number: 3
    code: 'CallCenter* center = new CallCenter(3);

      Printer::assertEquals(center->dispatchCall(), 1);

      Printer::assertEquals(center->dispatchCall(), 2);

      Printer::assertEquals(center->dispatchCall(), 3);

      Printer::assertEquals(center->dispatchCall(), -1);

      center->endCall(2);

      Printer::assertEquals(center->dispatchCall(), 2);

      '
    is_hidden: false
  - language: java
    number: 1
    code: 'CallCenter center = new CallCenter(2);

      assertEquals(center.dispatchCall(), 1);

      assertEquals(center.dispatchCall(), 2);

      assertEquals(center.dispatchCall(), -1);

      center.endCall(1);

      assertEquals(center.dispatchCall(), 1);

      '
    is_hidden: false
  - language: java
    number: 2
    code: 'CallCenter center = new CallCenter(0);

      assertEquals(center.dispatchCall(), -1);

      '
    is_hidden: false
  - language: java
    number: 3
    code: 'CallCenter center = new CallCenter(3);

      assertEquals(center.dispatchCall(), 1);

      assertEquals(center.dispatchCall(), 2);

      assertEquals(center.dispatchCall(), 3);

      assertEquals(center.dispatchCall(), -1);

      center.endCall(2);

      assertEquals(center.dispatchCall(), 2);

      '
    is_hidden: false
  - language: javascript
    number: 1
    code: 'var center = new CallCenter(2)

      assertEquals(center.dispatchCall(), 1);

      assertEquals(center.dispatchCall(), 2);

      assertEquals(center.dispatchCall(), -1);

      center.endCall(1);

      assertEquals(center.dispatchCall(), 1);

      '
    is_hidden: false
  - language: javascript
    number: 2
    code: 'var center = new CallCenter(0)

      assertEquals(center.dispatchCall(), -1);

      '
    is_hidden: false
  - language: javascript
    number: 3
    code: 'var center = new CallCenter(3)

      assertEquals(center.dispatchCall(), 1);

      assertEquals(center.dispatchCall(), 2);

      assertEquals(center.dispatchCall(), 3);

      assertEquals(center.dispatchCall(), -1);

      center.endCall(2);

      assertEquals(center.dispatchCall(), 2);

      '
    is_hidden: false
- title: 3. Warehouse Inventory Management
  id: warehouse-inventory
  difficulty: Medium
  problem-content: ./warehouse-inventory-content.tsx
  placeholder-code:
  - language: python
    code: "class Warehouse:\n    def __init__(self):\n        pass\n\n    def addItem(self,\
      \ itemType: str, quantity: int) -> bool:\n        pass\n\n    def removeItem(self,\
      \ itemType: str, quantity: int) -> bool:\n        pass\n\n    def getInventory(self)\
      \ -> dict:\n        pass\n\n# Your Warehouse object will be instantiated and\
      \ called as such:\n# obj = Warehouse()\n# param_1 = obj.addItem(itemType, quantity)\n\
      # param_2 = obj.removeItem(itemType, quantity)\n# param_3 = obj.getInventory()\n"
  - language: cpp
    code: "#include <string>\n#include <map>\n\nclass Warehouse {\npublic:\n    Warehouse()\
      \ {}\n\n    bool addItem(const std::string &itemType, int quantity) {}\n\n \
      \   bool removeItem(const std::string &itemType, int quantity) {}\n\n    std::map<std::string,\
      \ int> getInventory() {}\n};\n\n/**\n * Your Warehouse object will be instantiated\
      \ and called as such:\n * Warehouse* obj = new Warehouse();\n * bool param_1\
      \ = obj->addItem(itemType, quantity);\n * bool param_2 = obj->removeItem(itemType,\
      \ quantity);\n * std::map<std::string, int> param_3 = obj->getInventory();\n\
      \ */\n"
  - language: java
    code: "import java.util.HashMap;\nimport java.util.Map;\n\nclass Warehouse {\n\
      \    public Warehouse() {}\n\n    public boolean addItem(String itemType, int\
      \ quantity) {}\n\n    public boolean removeItem(String itemType, int quantity)\
      \ {}\n\n    public Map<String, Integer> getInventory() {}\n}\n\n/**\n * Your\
      \ Warehouse object will be instantiated and called as such:\n * Warehouse obj\
      \ = new Warehouse();\n * boolean param_1 = obj.addItem(itemType, quantity);\n\
      \ * boolean param_2 = obj.removeItem(itemType, quantity);\n * Map<String, Integer>\
      \ param_3 = obj.getInventory();\n */\n"
  - language: javascript
    code: "var Warehouse = function() {};\n\nWarehouse.prototype.addItem = function(itemType,\
      \ quantity) {};\n\nWarehouse.prototype.removeItem = function(itemType, quantity)\
      \ {};\n\nWarehouse.prototype.getInventory = function() {};\n\n/**\n * Your Warehouse\
      \ object will be instantiated and called as such:\n * var obj = new Warehouse();\n\
      \ * var param_1 = obj.addItem(itemType, quantity);\n * var param_2 = obj.removeItem(itemType,\
      \ quantity);\n * var param_3 = obj.getInventory();\n */\n"
  test-cases:
  - language: python
    number: 2
    code: 'warehouse = Warehouse()

      assertEquals(warehouse.removeItem("banana", 1), False)

      assertEquals(warehouse.getInventory(), {})

      '
    is_hidden: false
  - language: cpp
    number: 2
    code: 'Warehouse* warehouse = new Warehouse();

      Printer::assertEquals(warehouse->removeItem("banana", 1), false);

      Printer::assertEquals(warehouse->getInventory(), {});

      '
    is_hidden: false
  - language: java
    number: 2
    code: 'Warehouse warehouse = new Warehouse();

      assertEquals(warehouse.removeItem("banana", 1), false);

      assertEquals(warehouse.getInventory(), Map.of());

      '
    is_hidden: false
  - language: javascript
    number: 2
    code: 'var warehouse = new Warehouse();

      assertEquals(warehouse.removeItem("banana", 1), false);

      assertEquals(warehouse.getInventory(), {});

      '
    is_hidden: false
  - language: python
    number: 3
    code: 'warehouse = Warehouse()

      assertEquals(warehouse.addItem("apple", 10), True)

      assertEquals(warehouse.addItem("banana", 5), True)

      assertEquals(warehouse.removeItem("apple", 3), True)

      assertEquals(warehouse.removeItem("banana", 1), True)

      assertEquals(warehouse.getInventory(), {"apple": 7, "banana": 4})

      '
    is_hidden: false
  - language: cpp
    number: 3
    code: 'Warehouse* warehouse = new Warehouse();

      Printer::assertEquals(warehouse->addItem("apple", 10), true);

      Printer::assertEquals(warehouse->addItem("banana", 5), true);

      Printer::assertEquals(warehouse->removeItem("apple", 3), true);

      Printer::assertEquals(warehouse->removeItem("banana", 1), true);

      Printer::assertEquals(warehouse->getInventory(), {{"apple", 7}, {"banana", 4}});

      '
    is_hidden: false
  - language: java
    number: 3
    code: 'Warehouse warehouse = new Warehouse();

      assertEquals(warehouse.addItem("apple", 10), true);

      assertEquals(warehouse.addItem("banana", 5), true);

      assertEquals(warehouse.removeItem("apple", 3), true);

      assertEquals(warehouse.removeItem("banana", 1), true);

      assertEquals(warehouse.getInventory(), Map.of("apple", 7, "banana", 4));

      '
    is_hidden: false
  - language: javascript
    number: 3
    code: 'var warehouse = new Warehouse();

      assertEquals(warehouse.addItem("apple", 10), true);

      assertEquals(warehouse.addItem("banana", 5), true);

      assertEquals(warehouse.removeItem("apple", 3), true);

      assertEquals(warehouse.removeItem("banana", 1), true);

      assertEquals(warehouse.getInventory(), {"apple": 7, "banana": 4});'
    is_hidden: false
  - language: python
    number: 1
    code: 'warehouse = Warehouse()

      assertEquals(warehouse.addItem("apple", 10), True)

      assertEquals(warehouse.removeItem("apple", 5), True)

      assertEquals(warehouse.getInventory(), {"apple": 5})

      '
    is_hidden: false
  - language: cpp
    number: 1
    code: 'Warehouse* warehouse = new Warehouse();

      Printer::assertEquals(warehouse->addItem("apple", 10), true);

      Printer::assertEquals(warehouse->removeItem("apple", 5), true);

      Printer::assertEquals(warehouse->getInventory(), {{"apple", 5}});

      '
    is_hidden: false
  - language: java
    number: 1
    code: 'Warehouse warehouse = new Warehouse();

      assertEquals(warehouse.addItem("apple", 10), true);

      assertEquals(warehouse.removeItem("apple", 5), true);

      assertEquals(warehouse.getInventory(), Map.of("apple", 5));

      '
    is_hidden: false
  - language: javascript
    number: 1
    code: 'var warehouse = new Warehouse();

      assertEquals(warehouse.addItem("apple", 10), true);

      assertEquals(warehouse.removeItem("apple", 5), true);

      assertEquals(warehouse.getInventory(), {"apple": 5});

      '
    is_hidden: false
